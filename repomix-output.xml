This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
index.html
package.json
README.md
src-tauri/.gitignore
src-tauri/build.rs
src-tauri/Cargo.toml
src-tauri/src/main.rs
src-tauri/tauri.conf.json
src/assets.ts
src/components.ts
src/kaplay.ts
src/main.ts
src/objects/player.ts
src/scenes/game.ts
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
node_modules/
dist/
.DS_Store
src-tauri/target/
</file>

<file path="index.html">
<!DOCTYPE html>
<html>
<head>
<title>Overgrown</title>
</head>
<body style="overflow:hidden">
<script src="src/main.ts" type="module"></script>
</body>
</html>
</file>

<file path="package.json">
{
	"name": "Overgrown",
	"type": "module",
	"scripts": {
		"build": "vite build",
		"dev": "vite",
		"preview": "vite preview",
		"zip": "npm run build && mkdir -p dist && zip -r dist/game.zip dist -x \"**/.DS_Store\"",
		"check": "tsc",
		"dev:desktop": "tauri dev",
		"build:desktop": "tauri build"
	},
	"dependencies": {
		"kaplay": "^3001.0.19"
	},
	"devDependencies": {
		"@tauri-apps/cli": "^1.6.3",
		"@types/node": "^24.2.1",
		"typescript": "^5.9.2",
		"vite": "^7.1.2"
	}
}
</file>

<file path="README.md">
# Folder structure

- `src` - source code for your kaplay project
- `dist` - distribution folder, contains your index.html, built js bundle and static assets
- `src-tauri` - tauri project folder, contains tauri config file, icons, rust source if you need native code

## Development

```sh
$ npm run dev
```

will start a dev server at http://localhost:8000

## Distribution

```sh
$ npm run build
```

will build your js files into `dist/`

```sh
$ npm run zip
```

will build your game and package into a .zip file, you can upload to your server or itch.io / newground etc.


## Desktop

This project uses tauri for desktop builds, you have to have `rust` installed on your system for desktop to work, check out [tauri setup guide](https://tauri.app/v1/guides/getting-started/prerequisites/)

For tauri native APIs look [here](https://tauri.app/v1/api/js/)

```sh
$ npm run dev:desktop
```

will start the dev server and a native window that servers content from that dev server

```sh
$ npm run build:desktop
```

will create distributable native app package
</file>

<file path="src-tauri/.gitignore">
# Generated by Cargo
# will have compiled files and executables
/target/
</file>

<file path="src-tauri/build.rs">
fn main() {
  tauri_build::build()
}
</file>

<file path="src-tauri/Cargo.toml">
[package]
name = "app"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
license = ""
repository = ""
default-run = "app"
edition = "2021"
rust-version = "1.60"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.5.5" }

[dependencies]
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }
tauri = { version = "1.8.1" }

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = [ "tauri/custom-protocol" ]
</file>

<file path="src-tauri/src/main.rs">
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

fn main() {
  tauri::Builder::default()
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}
</file>

<file path="src-tauri/tauri.conf.json">
{
	"$schema": "../node_modules/@tauri-apps/cli/schema.json",
	"build": {
		"beforeBuildCommand": "npm run build",
		"beforeDevCommand": "npm run dev",
		"devPath": "http://localhost:8000",
		"distDir": "../dist"
	},
	"package": {
		"productName": "Overgrown",
		"version": "0.1.0"
	},
	"tauri": {
		"allowlist": {
			"all": false
		},
		"bundle": {
			"active": true,
			"category": "DeveloperTool",
			"copyright": "",
			"deb": {
				"depends": []
			},
			"externalBin": [],
			"icon": [
				"icons/32x32.png",
				"icons/128x128.png",
				"icons/128x128@2x.png",
				"icons/icon.icns",
				"icons/icon.ico"
			],
			"identifier": "com.kaplay.dev",
			"longDescription": "",
			"macOS": {
				"entitlements": null,
				"exceptionDomain": "",
				"frameworks": [],
				"providerShortName": null,
				"signingIdentity": null
			},
			"resources": [],
			"shortDescription": "",
			"targets": "all",
			"windows": {
				"certificateThumbprint": null,
				"digestAlgorithm": "sha256",
				"timestampUrl": ""
			}
		},
		"security": {
			"csp": null
		},
		"updater": {
			"active": false
		},
		"windows": [
			{
				"fullscreen": false,
				"height": 600,
				"resizable": true,
				"title": "Overgrown",
				"width": 800
			}
		]
	}
}
</file>

<file path="src/assets.ts">
loadRoot("./"); // A good idea for Itch.io publishing later
loadSprite("bean", "sprites/player.png").onError((err) => {
  debug.log(err);
});
</file>

<file path="src/components.ts">
export function spin(speed: number = 1200) {
  let spinning = false;
  return {
    require: ["rotate"],
    update() {
      if (!spinning) {
        return;
      }
      this.angle -= speed * dt();
      if (this.angle <= -360) {
        spinning = false;
        this.angle = 0;
      }
    },
    spin() {
      spinning = true;
    },
  };
}
</file>

<file path="src/kaplay.ts">
import kaplay from "kaplay";
import "kaplay/global";

export const k = kaplay({
  width: 480,
  height: 640,
  letterbox: true,
});

kaplay();
</file>

<file path="src/main.ts">
import "./kaplay.ts";
import "./assets.ts";
import "./scenes/game.ts";

go("game");
</file>

<file path="src/objects/player.ts">
import { spin } from "../components.ts";

export function addPlayer() {
  const player = add([
    sprite("bean"),
    pos(100, 400),
    anchor("center"),
    area(),
    body({ jumpForce: 700 }),
    doubleJump(),
    rotate(0),
    spin(),
    "palyer",
  ]);

  player.onKeyPress("space", () => {
    player.doubleJump();
  });

  player.onKeyDown("left", () => {
    player.move(-100, 0);
    player.flipX = false;
  });

  player.onKeyDown("right", () => {
    player.move(100, 0);
    player.flipX = true;
  });

  player.onDoubleJump(() => {
    player.spin();
    player.trigger("bloom");
  });

  return player;
}
</file>

<file path="src/scenes/game.ts">
import { addPlayer } from "../objects/player.ts";

scene("game", () => {
  setGravity(1600);
  const player = addPlayer();

  //ground & walls
  add([
    rect(width(), 12),
    anchor("botleft"),
    pos(0, height()),
    color(GREEN),
    area(),
    body({ isStatic: true }),
    offscreen({ destroy: true }),
    "ground",
    "scrollable",
  ]);
  add([
    rect(5, height()),
    anchor("botleft"),
    pos(0, height()),
    area(),
    body({ isStatic: true }),
    opacity(0.0),
  ]);
  add([
    rect(5, height()),
    anchor("botright"),
    pos(width(), height()),
    area(),
    body({ isStatic: true }),
    opacity(0.0),
  ]);

  player.on("bloom", () => {
    add([
      rect(64, 10),
      anchor("center"),
      pos(player.pos.x, player.pos.y + 20),
      color(BLUE),
      area(),
      body({ isStatic: true }),
      offscreen({ destroy: true }),
      "platform",
      "scrollable",
    ]);
  });

  onUpdate("scrollable", (s) => {
    if (!player.isGrounded) {
      return;
    }

    var heigthTrigger = height() / 2;
    if (player.pos.y < heigthTrigger) {
      s.move(0, -(player.pos.y - heigthTrigger));
    }
    if (player.pos.y > heigthTrigger) {
      s.move(0, player.pos.y - heigthTrigger);
    }
  });
});
</file>

<file path="tsconfig.json">
{
	"compilerOptions": {
		"noEmit": true,
		"target": "esnext",
		"moduleResolution": "node",
		"allowImportingTsExtensions": true,
	},
	"include": [
		"src/**/*.ts"
	]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";

const kaplayCongrats = () => {
  return {
    name: "vite-plugin-kaplay-hello",
    buildEnd() {
      const line = "---------------------------------------------------------";
      const msg = `ðŸ¦– Awesome pal! Send your game to us:\n\nðŸ’Ž Discord: https://discord.com/invite/aQ6RuQm3TF \nðŸ’– Donate to KAPLAY: https://opencollective.com/kaplay\n\ (you can disable this msg on vite.config)`;

      process.stdout.write(`\n${line}\n${msg}\n${line}\n`);
    },
  };
};

export default defineConfig({
  // index.html out file will start with a relative path for script
  base: "./",
  server: {
    port: 3001,
  },
  build: {
    // disable this for low bundle sizes
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          kaplay: ["kaplay"],
        },
      },
    },
  },
  plugins: [
    // Disable messages removing this line
    kaplayCongrats(),
  ],
});
</file>

</files>
